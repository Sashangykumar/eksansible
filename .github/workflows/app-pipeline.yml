name: Application Pipeline

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Infrastructure Pipeline"]
    types:
      - completed
  push:
    paths:
      - 'k8s/**'
    branches:
      - main

jobs:
  deploy-apps:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Setup kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        aws eks update-kubeconfig --region us-west-2 --name devops-eks-cluster

    - name: Deploy Apache
      run: |
        kubectl apply -f k8s/apache/
        kubectl rollout status deployment/apache-deployment

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Add Helm repositories
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update

    - name: Create monitoring namespace
      run: kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

    - name: Install Prometheus
      run: |
        helm upgrade --install prometheus prometheus-community/prometheus \
          --namespace monitoring \
          --set server.service.type=LoadBalancer \
          --wait

    - name: Install Grafana
      run: |
        helm upgrade --install grafana grafana/grafana \
          --namespace monitoring \
          --set service.type=LoadBalancer \
          --set adminPassword=admin123 \
          --wait

    - name: Get service URLs
      run: |
        echo "Waiting for LoadBalancer IPs..."
        sleep 60
        echo "=== Apache Service ==="
        kubectl get svc apache-service -o wide
        echo "=== Prometheus Service ==="
        kubectl get svc prometheus-server -n monitoring -o wide
        echo "=== Grafana Service ==="
        kubectl get svc grafana -n monitoring -o wide