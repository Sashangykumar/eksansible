---
# roles/eks/tasks/main.yml

- name: Create VPC
  amazon.aws.ec2_vpc_net:
    name: "{{ eks_vpc_name }}"
    cidr_block: "{{ eks_vpc_cidr }}"
    region: "{{ aws_region }}"
    state: present
  register: vpc_result

- name: Create Internet Gateway
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc_result.vpc.id }}"
    state: present
  register: igw_result

- name: Create public subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc_result.vpc.id }}"
    cidr: "{{ item.cidr }}"
    az: "{{ aws_region }}{{ item.az }}"
    map_public: true
    state: present
  with_items: "{{ eks_public_subnets }}"
  register: public_subnets

- name: Create private subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc_result.vpc.id }}"
    cidr: "{{ item.cidr }}"
    az: "{{ aws_region }}{{ item.az }}"
    map_public: false
    state: present
  with_items: "{{ eks_private_subnets }}"
  register: private_subnets

- name: Create route table for public subnets
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc_result.vpc.id }}"
    subnets: "{{ public_subnets.results | map(attribute='subnet.id') | list }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw_result.gateway_id }}"
  register: route_table

# ------------------------
# IAM ROLES
# ------------------------

- name: Create EKS cluster service role
  amazon.aws.iam_role:
    name: "eksClusterRole"
    assume_role_policy_document: "{{ lookup('file', 'files/eks-cluster-role.json') }}"
    managed_policies:
      - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  register: cluster_role

- name: Create EKS node group service role
  amazon.aws.iam_role:
    name: "eksNodeRole"
    assume_role_policy_document: "{{ lookup('file', 'files/eks-node-role.json') }}"
    managed_policies:
      - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
  register: node_role

- name: Create EKS service-linked role
  amazon.aws.iam_service_linked_role:
    aws_service_name: "eks.amazonaws.com"

- name: Wait for IAM role propagation
  pause:
    seconds: 90

# ------------------------
# CREATE CLUSTER
# ------------------------

- name: Create EKS cluster
  command: >
    aws eks create-cluster
      --name {{ eks_cluster_name }}
      --region {{ aws_region }}
      --role-arn {{ cluster_role.role.arn }}
      --resources-vpc-config subnetIds={{ public_subnets.results | map(attribute='subnet.id') | join(',') }},securityGroupIds={{ eks_security_group }}
  register: cluster_create_result
  failed_when: "'ResourceInUseException' not in cluster_create_result.stderr"
  changed_when: "'Cluster already exists' not in cluster_create_result.stderr"

- name: Wait 60 seconds for cluster to register
  pause:
    seconds: 60

# ------------------------
# VERIFY CLUSTER EXISTS (Fix)
# ------------------------

- name: Verify EKS cluster exists
  shell: |
    aws eks describe-cluster \
      --name {{ eks_cluster_name }} \
      --region {{ aws_region }} \
      --query 'cluster.status' \
      --output text
  register: verify_result
  retries: 15
  delay: 40
  until: verify_result.rc == 0 and verify_result.stdout != "NOT_FOUND"
  failed_when: verify_result.rc != 0
  changed_when: false

- name: Wait for EKS cluster to become ACTIVE
  shell: |
    aws eks wait cluster-active \
      --name {{ eks_cluster_name }} \
      --region {{ aws_region }}
  register: wait_cluster
  retries: 5
  delay: 60
  until: wait_cluster.rc == 0
  failed_when: wait_cluster.rc != 0
  changed_when: false

- name: Display EKS cluster status
  debug:
    msg: "EKS cluster {{ eks_cluster_name }} is ACTIVE and ready!"
