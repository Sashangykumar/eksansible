---
- name: Create VPC
  amazon.aws.ec2_vpc_net:
    name: "{{ cluster_name }}-vpc"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ region }}"
    tags:
      Environment: "{{ cluster_name }}"
    state: present
  register: vpc

- name: Create Internet Gateway
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region }}"
    tags:
      Name: "{{ cluster_name }}-igw"
    state: present
  register: igw

- name: Create public subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ item.cidr }}"
    region: "{{ region }}"
    az: "{{ region }}{{ item.az }}"
    map_public: true
    tags:
      Name: "{{ cluster_name }}-public-{{ item.az }}"
      kubernetes.io/role/elb: "1"
    state: present
  loop:
    - { cidr: "{{ public_subnet_cidrs[0] }}", az: "a" }
    - { cidr: "{{ public_subnet_cidrs[1] }}", az: "b" }
  register: public_subnets

- name: Create private subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ item.cidr }}"
    region: "{{ region }}"
    az: "{{ region }}{{ item.az }}"
    tags:
      Name: "{{ cluster_name }}-private-{{ item.az }}"
      kubernetes.io/role/internal-elb: "1"
    state: present
  loop:
    - { cidr: "{{ private_subnet_cidrs[0] }}", az: "a" }
    - { cidr: "{{ private_subnet_cidrs[1] }}", az: "b" }
  register: private_subnets

- name: Create route table for public subnets
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region }}"
    tags:
      Name: "{{ cluster_name }}-public-rt"
    subnets:
      - "{{ public_subnets.results[0].subnet.id }}"
      - "{{ public_subnets.results[1].subnet.id }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ igw.gateway_id }}"

- name: Create EKS cluster service role
  amazon.aws.iam_role:
    name: "{{ cluster_name }}-cluster-role"
    assume_role_policy_document: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "eks.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
    managed_policies:
      - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
    state: present

- name: Create EKS node group service role
  amazon.aws.iam_role:
    name: "{{ cluster_name }}-node-role"
    assume_role_policy_document: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
    managed_policies:
      - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
    state: present

- name: Create EKS cluster
  amazon.aws.eks_cluster:
    name: "{{ cluster_name }}"
    version: "{{ kubernetes_version }}"
    role_arn: "arn:aws:iam::{{ ansible_account_id }}:role/{{ cluster_name }}-cluster-role"
    subnets:
      - "{{ public_subnets.results[0].subnet.id }}"
      - "{{ public_subnets.results[1].subnet.id }}"
      - "{{ private_subnets.results[0].subnet.id }}"
      - "{{ private_subnets.results[1].subnet.id }}"
    wait: true
    wait_timeout: 1200
  register: cluster

- name: Create EKS node group
  amazon.aws.eks_nodegroup:
    name: "{{ node_group_name }}"
    cluster_name: "{{ cluster_name }}"
    role_arn: "arn:aws:iam::{{ ansible_account_id }}:role/{{ cluster_name }}-node-role"
    subnets:
      - "{{ private_subnets.results[0].subnet.id }}"
      - "{{ private_subnets.results[1].subnet.id }}"
    instance_types:
      - "{{ node_instance_type }}"
    scaling_config:
      desired_size: "{{ node_desired_capacity }}"
      max_size: "{{ node_max_size }}"
      min_size: "{{ node_min_size }}"
    wait: true
    wait_timeout: 1200

- name: Generate kubeconfig
  shell: |
    aws eks update-kubeconfig --region {{ region }} --name {{ cluster_name }}
  environment:
    AWS_DEFAULT_REGION: "{{ region }}"

- name: Display cluster information
  debug:
    msg:
      - "EKS Cluster Name: {{ cluster_name }}"
      - "Region: {{ region }}"
      - "Endpoint: {{ cluster.cluster.endpoint }}"
      - "Kubeconfig updated at ~/.kube/config"